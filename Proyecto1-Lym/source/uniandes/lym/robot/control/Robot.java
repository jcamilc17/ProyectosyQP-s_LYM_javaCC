/* Robot.java */
/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Arrays;
import java.util.function.Supplier;


@SuppressWarnings("serial")
public class Robot implements RobotConstants {


        private RobotWorldDec world;
        private HashMap<String, Integer> variables = new HashMap<String, Integer> ();
        HashMap<String, Object[]> macros = new HashMap<>();




        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida=new String();

        private int size;
        private int myX;
        private int myY;
        private int myChips;
        private int myBalloons;
        private int balloonsHere;
        private int chipsHere;
        private int roomForChips;

        void definicionConstantes() {
                size = world.getN();
                myX = (int)(world.getPosition()).getX();
                myY = (int)(world.getPosition()).getY();
                myChips = world.getMyChips();
                myBalloons = world.getMyBalloons();
                balloonsHere = world.countBalloons();
                chipsHere = world.chipsToPick();
                roomForChips = world.freeSpacesForChips();

        }


        int getAtribute(String s) {

                if(s.equals("size")) {
                return this.size;
                }
                else if(s.equals("myX")) {
                  return this.myX;
                }
                else if(s.equals("myY")) {
                  return this.myY;
                }
                else if(s.equals("myChips")) {
                  return this.myChips;
                }
                else if(s.equals("myBalloons")) {
                  return this.myBalloons;
                }
                else if(s.equals("ballonsHere")) {
                  return this.balloonsHere;
                }
                else if(s.equals("chipsHere")) {
                  return this.chipsHere;
                }
                else{
                  return this.roomForChips;
                }
        }

        void accionesMovesParam(String entrada) {

                int orient = world.getFacing();
                if ((entrada.toLowerCase()).equals("right")) {

                  if (orient == 0) {
                        world.right(); }
                  else if (orient == 1) {
                        world.left(); }
                  else if (orient == 2) {
                        world.down(); }
                  else {
                    world.up(); }
                }
                else if ((entrada.toLowerCase()).equals("forward")) {
                  world.moveForward(1,false);}

                else if ((entrada.toLowerCase()).equals("left")) {

                  if (orient == 0) {
                        world.left(); }
                  else if (orient == 1) {
                        world.right(); }
                  else if (orient == 2) {
                        world.up(); }
                  else {
                    world.down(); }
                }

                else if ((entrada.toLowerCase()).equals("backwards")) {
                  world.moveForward(-1,false);}




}

/* Programa Principal y Estructuras de Control*/

        //boolean command(uniandes.lym.robot.view.Console sistema) :
  final public         boolean command(Console sistema) throws ParseException {String name;
                int paramValue;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXEC:
    case NEW:{
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXEC:{
          jj_consume_token(EXEC);
          jj_consume_token(59);
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case TURNTOMY:
            case TURNTOTHE:
            case WALK:
            case JUMP:
            case DROP:
            case PICK_NEW:
            case GRAB:
            case LETGO:
            case POP_NEW:
            case MOVES:
            case NOP:
            case SAFEEXE:
            case IF:
            case DO:
            case REPEAT:{
              ;
              break;
              }
            default:
              jj_la1[0] = jj_gen;
              break label_2;
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case TURNTOMY:
            case TURNTOTHE:
            case WALK:
            case JUMP:
            case DROP:
            case PICK_NEW:
            case GRAB:
            case LETGO:
            case POP_NEW:
            case MOVES:
            case NOP:
            case SAFEEXE:{
              instruction();
              jj_consume_token(SEMI);
              break;
              }
            case IF:
            case DO:
            case REPEAT:{
              controlStructure(sistema);
              break;
              }
            default:
              jj_la1[1] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(60);
          break;
          }
        case NEW:{
          jj_consume_token(NEW);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VAR:{
            varDeclaration();
            break;
            }
          case MACRO:{
            jj_consume_token(MACRO);
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }

                        sistema.printOutput(salida);
                        {if ("" != null) return true;}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXEC:
        case NEW:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
      }
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/* Instrucciones o comandos*/
  final public 
void instruction() throws ParseException {int x = 0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TURNTOMY:{
      jj_consume_token(TURNTOMY);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RIGHT:{
        jj_consume_token(RIGHT);
world.turnRight(); salida = "Command: turnToMy(right)";
        break;
        }
      case LEFT:{
        jj_consume_token(LEFT);
world.turnRight(); world.turnRight(); world.turnRight(); salida = "Command: turnToMy(left)";
        break;
        }
      case BACK:{
        jj_consume_token(BACK);
world.turnRight(); world.turnRight(); salida = "Command: turnToMy(back)";
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
      break;
      }
    case TURNTOTHE:{
      jj_consume_token(TURNTOTHE);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NORTH:{
        jj_consume_token(NORTH);
turnToNorth(); salida = "Command: turnToThe(North)";
        break;
        }
      case SOUTH:{
        jj_consume_token(SOUTH);
turnToSouth(); salida = "Command: turnToThe(South)";
        break;
        }
      case EAST:{
        jj_consume_token(EAST);
turnToEast(); salida = "Command: turnToThe(East)";
        break;
        }
      case WEST:{
        jj_consume_token(WEST);
turnToWest(); salida = "Command: turnToThe(West)";
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
      break;
      }
    case WALK:{
      jj_consume_token(WALK);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        x = num();
        break;
        }
      case SIZE:
      case MYX:
      case MYY:
      case MYCHIPS:
      case MYBALLOONS:
      case BALLOONSHERE:
      case CHIPSHERE:
      case ROOMFORCHIPS:
      case WORD:{
        x = numConstVar();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
world.moveForward(x, false); salida = "Command: Walk forward " + x;
      break;
      }
    case JUMP:{
      jj_consume_token(JUMP);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        x = num();
        break;
        }
      case SIZE:
      case MYX:
      case MYY:
      case MYCHIPS:
      case MYBALLOONS:
      case BALLOONSHERE:
      case CHIPSHERE:
      case ROOMFORCHIPS:
      case WORD:{
        x = numConstVar();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
world.moveForward(x, true); salida = "Command: Jump forward " + x;
      break;
      }
    case DROP:{
      jj_consume_token(DROP);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        x = num();
        break;
        }
      case SIZE:
      case MYX:
      case MYY:
      case MYCHIPS:
      case MYBALLOONS:
      case BALLOONSHERE:
      case CHIPSHERE:
      case ROOMFORCHIPS:
      case WORD:{
        x = numConstVar();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
world.putChips(x); salida = "Command: Drop " + x + " chips";
      break;
      }
    case PICK_NEW:{
      jj_consume_token(PICK_NEW);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        x = num();
        break;
        }
      case SIZE:
      case MYX:
      case MYY:
      case MYCHIPS:
      case MYBALLOONS:
      case BALLOONSHERE:
      case CHIPSHERE:
      case ROOMFORCHIPS:
      case WORD:{
        x = numConstVar();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
world.pickChips(x); salida = "Command: Pick " + x + " chips";
      break;
      }
    case GRAB:{
      jj_consume_token(GRAB);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        x = num();
        break;
        }
      case SIZE:
      case MYX:
      case MYY:
      case MYCHIPS:
      case MYBALLOONS:
      case BALLOONSHERE:
      case CHIPSHERE:
      case ROOMFORCHIPS:
      case WORD:{
        x = numConstVar();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
world.grabBalloons(x); salida = "Command: Grab " + x + " balloons";
      break;
      }
    case LETGO:{
      jj_consume_token(LETGO);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        x = num();
        break;
        }
      case SIZE:
      case MYX:
      case MYY:
      case MYCHIPS:
      case MYBALLOONS:
      case BALLOONSHERE:
      case CHIPSHERE:
      case ROOMFORCHIPS:
      case WORD:{
        x = numConstVar();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
world.putBalloons(x); salida = "Command: Let go " + x + " balloons";
      break;
      }
    case POP_NEW:{
      jj_consume_token(POP_NEW);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        x = num();
        break;
        }
      case SIZE:
      case MYX:
      case MYY:
      case MYCHIPS:
      case MYBALLOONS:
      case BALLOONSHERE:
      case CHIPSHERE:
      case ROOMFORCHIPS:
      case WORD:{
        x = numConstVar();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
world.popBalloons(x); salida = "Command: Pop " + x + " balloons";
      break;
      }
    case MOVES:{
      jj_consume_token(MOVES);
      jj_consume_token(61);
      paramsmoves();
      jj_consume_token(62);
salida = "Command: Moves";
      break;
      }
    case NOP:{
      jj_consume_token(NOP);
salida = "Command: Nop";
      break;
      }
    case SAFEEXE:{
      jj_consume_token(SAFEEXE);
      safeexecution();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void safeexecution() throws ParseException {int x = 0;
    jj_consume_token(61);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WALK:{
      jj_consume_token(WALK);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        x = num();
        break;
        }
      case SIZE:
      case MYX:
      case MYY:
      case MYCHIPS:
      case MYBALLOONS:
      case BALLOONSHERE:
      case CHIPSHERE:
      case ROOMFORCHIPS:
      case WORD:{
        x = numConstVar();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
try {
             world.moveForward(x, false);
             salida = "Command: Walk forward " + x;
         } catch (Error e) {
             salida = "Error: " + e.getMessage();
         }
      break;
      }
    case JUMP:{
      jj_consume_token(JUMP);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        x = num();
        break;
        }
      case SIZE:
      case MYX:
      case MYY:
      case MYCHIPS:
      case MYBALLOONS:
      case BALLOONSHERE:
      case CHIPSHERE:
      case ROOMFORCHIPS:
      case WORD:{
        x = numConstVar();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
try {
             world.moveForward(x, true);
             salida = "Command: Jump forward " + x;
         } catch (Error e) {
             salida = "Error: " + e.getMessage();
         }
      break;
      }
    case DROP:{
      jj_consume_token(DROP);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        x = num();
        break;
        }
      case SIZE:
      case MYX:
      case MYY:
      case MYCHIPS:
      case MYBALLOONS:
      case BALLOONSHERE:
      case CHIPSHERE:
      case ROOMFORCHIPS:
      case WORD:{
        x = numConstVar();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
try {
             world.putChips(x);
             salida = "Command: Drop " + x + " chips";
         } catch (Error e) {
             salida = "Error: " + e.getMessage();
         }
      break;
      }
    case PICK_NEW:{
      jj_consume_token(PICK_NEW);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        x = num();
        break;
        }
      case SIZE:
      case MYX:
      case MYY:
      case MYCHIPS:
      case MYBALLOONS:
      case BALLOONSHERE:
      case CHIPSHERE:
      case ROOMFORCHIPS:
      case WORD:{
        x = numConstVar();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
try {
             world.pickChips(x);
             salida = "Command: Pick " + x + " chips";
         } catch (Error e) {
             salida = "Error: " + e.getMessage();
         }
      break;
      }
    case GRAB:{
      jj_consume_token(GRAB);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        x = num();
        break;
        }
      case SIZE:
      case MYX:
      case MYY:
      case MYCHIPS:
      case MYBALLOONS:
      case BALLOONSHERE:
      case CHIPSHERE:
      case ROOMFORCHIPS:
      case WORD:{
        x = numConstVar();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
try {
             world.grabBalloons(x);
             salida = "Command: Grab " + x + " balloons";
         } catch (Error e) {
             salida = "Error: " + e.getMessage();
         }
      break;
      }
    case LETGO:{
      jj_consume_token(LETGO);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        x = num();
        break;
        }
      case SIZE:
      case MYX:
      case MYY:
      case MYCHIPS:
      case MYBALLOONS:
      case BALLOONSHERE:
      case CHIPSHERE:
      case ROOMFORCHIPS:
      case WORD:{
        x = numConstVar();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
try {
             world.putBalloons(x);
             salida = "Command: Let go " + x + " balloons";
         } catch (Error e) {
             salida = "Error: " + e.getMessage();
         }
      break;
      }
    case POP_NEW:{
      jj_consume_token(POP_NEW);
      jj_consume_token(61);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        x = num();
        break;
        }
      case SIZE:
      case MYX:
      case MYY:
      case MYCHIPS:
      case MYBALLOONS:
      case BALLOONSHERE:
      case CHIPSHERE:
      case ROOMFORCHIPS:
      case WORD:{
        x = numConstVar();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
try {
             world.popBalloons(x);
             salida = "Command: Pop " + x + " balloons";
         } catch (Error e) {
             salida = "Error: " + e.getMessage();
         }
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(62);
}

  final public void constantesTokens() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIZE:{
      jj_consume_token(SIZE);
      break;
      }
    case MYX:{
      jj_consume_token(MYX);
      break;
      }
    case MYY:{
      jj_consume_token(MYY);
      break;
      }
    case MYCHIPS:{
      jj_consume_token(MYCHIPS);
      break;
      }
    case MYBALLOONS:{
      jj_consume_token(MYBALLOONS);
      break;
      }
    case BALLOONSHERE:{
      jj_consume_token(BALLOONSHERE);
      break;
      }
    case CHIPSHERE:{
      jj_consume_token(CHIPSHERE);
      break;
      }
    case ROOMFORCHIPS:{
      jj_consume_token(ROOMFORCHIPS);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void paramsmoves() throws ParseException {String movimiento = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RIGHT:{
      jj_consume_token(RIGHT);
      break;
      }
    case LEFT:{
      jj_consume_token(LEFT);
      break;
      }
    case FORWARD:{
      jj_consume_token(FORWARD);
      break;
      }
    case BACKWARDS:{
      jj_consume_token(BACKWARDS);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
movimiento = token.image; accionesMovesParam(movimiento);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 63:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_3;
      }
      jj_consume_token(63);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RIGHT:{
        jj_consume_token(RIGHT);
        break;
        }
      case LEFT:{
        jj_consume_token(LEFT);
        break;
        }
      case FORWARD:{
        jj_consume_token(FORWARD);
        break;
        }
      case BACKWARDS:{
        jj_consume_token(BACKWARDS);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
movimiento = token.image; accionesMovesParam(movimiento);
    }
}

  final public void controlStructure(Console sistema) throws ParseException {int n;
    String instructionToken;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      conditional(sistema);
      break;
      }
    case DO:{
      doWhileLoop(sistema);
      break;
      }
    case REPEAT:{
      repeatTimes(sistema);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void conditional(Console sistema) throws ParseException {StringBuilder bloq1 = new StringBuilder();
    StringBuilder bloq2 = new StringBuilder();
    jj_consume_token(IF);
    condition();
    jj_consume_token(THEN);
    jj_consume_token(59);
    label_4:
    while (true) {
      instruction();
      jj_consume_token(SEMI);
bloq1.append(salida).append("\n");
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TURNTOMY:
      case TURNTOTHE:
      case WALK:
      case JUMP:
      case DROP:
      case PICK_NEW:
      case GRAB:
      case LETGO:
      case POP_NEW:
      case MOVES:
      case NOP:
      case SAFEEXE:{
        ;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(60);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      jj_consume_token(59);
      label_5:
      while (true) {
        instruction();
        jj_consume_token(SEMI);
bloq2.append(salida).append("\n");
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TURNTOMY:
        case TURNTOTHE:
        case WALK:
        case JUMP:
        case DROP:
        case PICK_NEW:
        case GRAB:
        case LETGO:
        case POP_NEW:
        case MOVES:
        case NOP:
        case SAFEEXE:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_5;
        }
      }
      jj_consume_token(60);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(FI);
if (condition()) {
            sistema.printOutput("Executing IF block");
            sistema.printOutput(bloq1.toString());
        } else {
            sistema.printOutput("Executing ELSE block");
            sistema.printOutput(bloq2.toString());
        }
}

  final public void doWhileLoop(Console sistema) throws ParseException {List<String> instructionBlock = new ArrayList<>();
    boolean conditionResult;
    jj_consume_token(DO);
conditionResult = condition();
    jj_consume_token(59);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TURNTOMY:
      case TURNTOTHE:
      case WALK:
      case JUMP:
      case DROP:
      case PICK_NEW:
      case GRAB:
      case LETGO:
      case POP_NEW:
      case MOVES:
      case NOP:
      case SAFEEXE:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_6;
      }
      instruction();
      jj_consume_token(SEMI);
instructionBlock.add(salida);
    }
    jj_consume_token(60);
    jj_consume_token(OD);
    jj_consume_token(SEMI);
while (conditionResult) {
            sistema.printOutput("Executing DO-OD loop iteration");

            for (String instr : instructionBlock) {
                sistema.printOutput(instr);
            }

            conditionResult = condition();
        }
}

  final public void repeatTimes(Console sistema) throws ParseException {int x = 0;
    List<String> instructionBlock = new ArrayList<>();
    jj_consume_token(REPEAT);
    x = num();
    jj_consume_token(TIMES);
    jj_consume_token(59);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TURNTOMY:
      case TURNTOTHE:
      case WALK:
      case JUMP:
      case DROP:
      case PICK_NEW:
      case GRAB:
      case LETGO:
      case POP_NEW:
      case MOVES:
      case NOP:
      case SAFEEXE:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_7;
      }
      instruction();
      jj_consume_token(SEMI);
    }
    jj_consume_token(60);
    jj_consume_token(PER);
    jj_consume_token(SEMI);
if (x > 0) {
            for (int i = 0; i < x; i++) {
                sistema.printOutput("Repeating command block, iteration: " + (i + 1));

                for (int j = 0; j < x; j++) {
                    instruction();
                }
            }
        } else {
            sistema.printOutput("Error: Repeat count must be greater than 0");
        }
}

/* Condicionales */
  final public 
boolean condition() throws ParseException {boolean result = false;
    jj_consume_token(61);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ISBLOCKED:{
      result = isBlockedCondition();
      break;
      }
    case SOUTH:
    case EAST:
    case WEST:
    case ISFACING:{
      result = isFacingCondition();
      break;
      }
    case ZERO:{
      result = zeroCondition();
      break;
      }
    case NOT:{
      result = notCondition();
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(62);
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  final public boolean isBlockedCondition() throws ParseException {boolean isBlockedCorrectly = false;
    Point currentPos;
    Point checkPos;
    jj_consume_token(ISBLOCKED);
    jj_consume_token(61);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT:{
      jj_consume_token(LEFT);
currentPos = world.getPosition();
            checkPos = new Point(currentPos.x - 1, currentPos.y);
            if (world.isBlocked(checkPos)) {
                isBlockedCorrectly = true;
            }
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
currentPos = world.getPosition();
            checkPos = new Point(currentPos.x + 1, currentPos.y);
            if (world.isBlocked(checkPos)) {
                isBlockedCorrectly = true;
            }
      break;
      }
    case BACK:{
      jj_consume_token(BACK);
currentPos = world.getPosition();
            checkPos = new Point(currentPos.x, currentPos.y + 1);
            if (world.isBlocked(checkPos)) {
                isBlockedCorrectly = true;
            }
      break;
      }
    case FRONT:{
      jj_consume_token(FRONT);
currentPos = world.getPosition();
            checkPos = new Point(currentPos.x, currentPos.y - 1);
            if (world.isBlocked(checkPos)) {
                isBlockedCorrectly = true;
            }
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(62);
{if ("" != null) return isBlockedCorrectly;}
    throw new Error("Missing return statement in function");
}

  final public boolean isFacingCondition() throws ParseException {boolean isFacingCorrectly = false;
        int facing;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ISFACING:{
      jj_consume_token(ISFACING);
      jj_consume_token(61);
      jj_consume_token(NORTH);
facing = world.getFacing();
    if (facing == 0) {isFacingCorrectly = true;};
      break;
      }
    case SOUTH:{
      jj_consume_token(SOUTH);
facing = world.getFacing();
    if (facing == 1) {isFacingCorrectly = true;};
      break;
      }
    case EAST:{
      jj_consume_token(EAST);
facing = world.getFacing();
    if (facing == 2) {isFacingCorrectly = true;};
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
facing = world.getFacing();
    if (facing == 3) {isFacingCorrectly = true;};
      jj_consume_token(62);
{if ("" != null) return isFacingCorrectly;}
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean zeroCondition() throws ParseException {int number;
    jj_consume_token(ZERO);
    jj_consume_token(61);
    number = num();
    jj_consume_token(62);
{if ("" != null) return number == 0;}
    throw new Error("Missing return statement in function");
}

  final public boolean notCondition() throws ParseException {
    jj_consume_token(NOT);
    jj_consume_token(61);
{if ("" != null) return !condition();}
    jj_consume_token(62);
    throw new Error("Missing return statement in function");
}

/* Metodos turnToThe (Cardinalidades)*/
  final public 
void turnToNorth() throws ParseException {int facing;
facing = world.getFacing();
    if (facing == 0) {
        salida = "Already facing North";
    } else if (facing == 1) {
        world.turnRight();
        world.turnRight();
        salida = "Turned to face North";
    } else if (facing == 2) {
        world.turnRight();
        world.turnRight();
        world.turnRight();
        salida = "Turned to face North";
    } else if (facing == 3) {
        world.turnRight();
        salida = "Turned to face North";
    }
}

  final public void turnToSouth() throws ParseException {int facing;
facing = world.getFacing();
    if (facing == 1) {
        salida = "Already facing South";
    } else if (facing == 0) {
        world.turnRight();
        world.turnRight();
        salida = "Turned to face South";
    } else if (facing == 2) {
        world.turnRight();
        salida = "Turned to face South";
    } else if (facing == 3) {
        world.turnRight();
        world.turnRight();
        world.turnRight();
        salida = "Turned to face South";
    }
}

  final public void turnToEast() throws ParseException {int facing;
facing = world.getFacing();
    if (facing == 2) {
        salida = "Already facing East";
    } else if (facing == 3) {
        world.turnRight();
        world.turnRight();
        salida = "Turned to face East";
    } else if (facing == 0) {
        world.turnRight();
        salida = "Turned to face East";
    } else if (facing == 1) {
        world.turnRight();
        world.turnRight();
        world.turnRight();
        salida = "Turned to face East";
    }
}

  final public void turnToWest() throws ParseException {int facing;
facing = world.getFacing();
    if (facing == 3) {
        salida = "Already facing West";
    } else if (facing == 2) {
        world.turnRight();
        world.turnRight();
        salida = "Turned to face West";
    } else if (facing == 0) {
        world.turnRight();
        world.turnRight();
        world.turnRight();
        salida = "Turned to face West";
    } else if (facing == 1) {
        world.turnRight();
        salida = "Turned to face West";
    }
}

/* Metodos put y get*/
  final public 
        void put() throws ParseException {int f=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      jj_consume_token(63);
      f = num();
world.putChips(f); salida = "Command:  Put Chips";
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      jj_consume_token(63);
      f = num();
world.putBalloons(f); salida = "Command:  Put Balloons";
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void get() throws ParseException {int f=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      jj_consume_token(63);
      f = num();
world.pickChips(f);salida = "Command:  Pick chips";
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      jj_consume_token(63);
      f = num();
world.grabBalloons(f);salida="Command:  Pick balloons";
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void varDeclaration() throws ParseException {String llave = "";
          int valor = 0;
    jj_consume_token(VAR);
    jj_consume_token(WORD);
llave = token.image;
    jj_consume_token(64);
    jj_consume_token(NUM);
valor = Integer.parseInt(token.image); variables.put(llave,valor);
}

/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */
  final public 
String name() throws ParseException {Token nameToken;
    nameToken = jj_consume_token(WORD);
{if ("" != null) return nameToken.image;}
    throw new Error("Missing return statement in function");
}

  final public int num() throws ParseException, Error {int total=1;
    jj_consume_token(NUM);
try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                {if (true) throw new Error("Number out of bounds: "+token.image+" !!");}
                        }
                        {if ("" != null) return total;}
    throw new Error("Missing return statement in function");
}

  final public int numConstVar() throws ParseException {int totalConstVar = 0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIZE:
    case MYX:
    case MYY:
    case MYCHIPS:
    case MYBALLOONS:
    case BALLOONSHERE:
    case CHIPSHERE:
    case ROOMFORCHIPS:{
      constantesTokens();
totalConstVar = getAtribute(token.image);
                        {if ("" != null) return totalConstVar;}
      break;
      }
    case WORD:{
      jj_consume_token(WORD);
try
                                                {
                                                  totalConstVar = variables.get(token.image);
                                                }
                                                catch (NullPointerException e)
                                                {
                                                  {if (true) throw new Error("No existe variable: "+token.image+" !!");}
                                                }
                                                {if ("" != null) return totalConstVar;}
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1ffe00,0x1ffe00,0x180,0x60,0x60,0x61,0xe00000,0x78000000,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x1ffe00,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x3f800,0x80000000,0x6600000,0x0,0x6600000,0x0,0x1ffe00,0x1ffe00,0x0,0x1ffe00,0x1ffe00,0x70000000,0x1e00000,0x70000000,0x0,0x0,0x80000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x2880,0x2880,0x0,0x0,0x0,0x0,0x0,0x0,0x110007f,0x110007f,0x110007f,0x110007f,0x110007f,0x110007f,0x110007f,0x0,0x110007f,0x110007f,0x110007f,0x110007f,0x110007f,0x110007f,0x110007f,0x0,0x7f,0x0,0x80000000,0x0,0x2880,0x0,0x0,0x200,0x0,0x0,0xf0000,0x0,0x20000,0xc00000,0xc00000,0x10007f,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RobotTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[65];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 40; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 65; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
