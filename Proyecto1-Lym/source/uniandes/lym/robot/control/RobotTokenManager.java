/* RobotTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. RobotTokenManager.java */
package uniandes.lym.robot.control;
import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Arrays;
import java.util.function.Supplier;

/** Token Manager. */
@SuppressWarnings ("unused")
public class RobotTokenManager implements RobotConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xcfffffffffffe0L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 0;
            return 0;
         }
         return -1;
      case 1:
         if ((active0 & 0x1c8000000000L) != 0L)
            return 0;
         if ((active0 & 0xcfe37fffffffe0L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
            return 0;
         }
         return -1;
      case 2:
         if ((active0 & 0x88003000a00c0L) != 0L)
            return 0;
         if ((active0 & 0xc7637cfff5ff20L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
            return 0;
         }
         return -1;
      case 3:
         if ((active0 & 0xc7607c1b350700L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 3;
            }
            return 0;
         }
         if ((active0 & 0x300e4c0f820L) != 0L)
            return 0;
         return -1;
      case 4:
         if ((active0 & 0x400019250100L) != 0L)
            return 0;
         if ((active0 & 0xc3207c06100600L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 4;
            }
            return 0;
         }
         return -1;
      case 5:
         if ((active0 & 0x200000000000L) != 0L)
            return 0;
         if ((active0 & 0x43007c06100600L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
            return 0;
         }
         return -1;
      case 6:
         if ((active0 & 0x402100000L) != 0L)
            return 0;
         if ((active0 & 0x43007804000600L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
            return 0;
         }
         return -1;
      case 7:
         if ((active0 & 0x200L) != 0L)
            return 0;
         if ((active0 & 0x43007804000400L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 7;
            }
            return 0;
         }
         return -1;
      case 8:
         if ((active0 & 0x2004000400L) != 0L)
            return 0;
         if ((active0 & 0x1005800000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 8;
            return 0;
         }
         return -1;
      case 9:
         if ((active0 & 0x800000000L) != 0L)
            return 0;
         if ((active0 & 0x5000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 9;
            return 0;
         }
         return -1;
      case 10:
         if ((active0 & 0x5000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 10;
            return 0;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 61);
      case 41:
         return jjStopAtPos(0, 62);
      case 44:
         return jjStopAtPos(0, 63);
      case 59:
         return jjStopAtPos(0, 58);
      case 61:
         return jjStopAtPos(0, 64);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40001004800000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x80002000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80000002000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20020000020L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40003000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3008000000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x410000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0xf00040100L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000008080040L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800000024000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x204000200000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x90100000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x410000000600L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x40000800L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 123:
         return jjStopAtPos(0, 59);
      case 125:
         return jjStopAtPos(0, 60);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40001024900980L);
      case 68:
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 0);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4a00040410040L);
      case 70:
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 0);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80012000000000L);
      case 73:
      case 105:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 42, 0);
         return jjMoveStringLiteralDfa2_0(active0, 0x400080204000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 79:
      case 111:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 0);
         return jjMoveStringLiteralDfa2_0(active0, 0x800401a0e0000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100a000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1600L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0xf00000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x404804100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000020L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000500000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80002000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40001000000800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000001000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4001002000L);
      case 80:
      case 112:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 0);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 0);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 82:
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 0);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 0);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000a000600L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20060000000L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 0);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 87:
      case 119:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 0);
         break;
      case 88:
      case 120:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 0);
         break;
      case 89:
      case 121:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 0);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000800000000L);
      case 66:
      case 98:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 0);
         break;
      case 67:
      case 99:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 0);
         break;
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 0);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 0);
         return jjMoveStringLiteralDfa4_0(active0, 0x600000140000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x400200000L);
      case 75:
      case 107:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 0);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 0);
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x41001000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 78:
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 0);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000600L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 80:
      case 112:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 0);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 0);
         return jjMoveStringLiteralDfa4_0(active0, 0x80002000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 0);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 0);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 0);
         return jjMoveStringLiteralDfa4_0(active0, 0x18000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 63:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(4, 50);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200002000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 72:
      case 104:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 0);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 0);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 79:
      case 111:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 0);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 0);
         return jjMoveStringLiteralDfa5_0(active0, 0x41001000000000L);
      case 83:
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 0);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 0);
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 84:
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 0);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 0);
         return jjMoveStringLiteralDfa5_0(active0, 0x600L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x40005000000600L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 84:
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 0);
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 0);
         break;
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 0);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x42001000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x4004000000L);
      case 83:
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 0);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      case 83:
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 89:
      case 121:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 63:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(8, 49);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 10, 0);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 0);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x5000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 83:
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 26, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 63:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(9, 48);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L);
      case 83:
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 36, 0);
         break;
      case 83:
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 38, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 56;
                  { jjCheckNAdd(1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  kind = 52;
                  { jjCheckNAdd(0); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\73", "\173", "\175", "\50", "\51", "\54", "\75", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getEndLine();
      beginColumn = endColumn = input_stream.getEndColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {0
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 52;
   jjmatchedPos = -1;
   curPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

int[] jjemptyLineNo = new int[1];
int[] jjemptyColNo = new int[1];
boolean[] jjbeenHere = new boolean[1];
void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
         break;
      case 2 :
         break;
      case 3 :
         break;
      case 4 :
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 5 :
         break;
      case 6 :
         break;
      case 7 :
         break;
      case 8 :
         break;
      case 9 :
         break;
      case 10 :
         break;
      case 11 :
         break;
      case 12 :
         break;
      case 13 :
         break;
      case 14 :
         break;
      case 15 :
         break;
      case 16 :
         break;
      case 17 :
         break;
      case 18 :
         break;
      case 19 :
         break;
      case 20 :
         break;
      case 21 :
         break;
      case 22 :
         break;
      case 23 :
         break;
      case 24 :
         break;
      case 25 :
         break;
      case 26 :
         break;
      case 27 :
         break;
      case 28 :
         break;
      case 29 :
         break;
      case 30 :
         break;
      case 31 :
         break;
      case 32 :
         break;
      case 33 :
         break;
      case 34 :
         break;
      case 35 :
         break;
      case 36 :
         break;
      case 37 :
         break;
      case 38 :
         break;
      case 39 :
         break;
      case 40 :
         break;
      case 41 :
         break;
      case 42 :
         break;
      case 43 :
         break;
      case 44 :
         break;
      case 45 :
         break;
      case 46 :
         break;
      case 47 :
         break;
      case 48 :
         break;
      case 49 :
         break;
      case 50 :
         break;
      case 51 :
         break;
      case 52 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() &&
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      case 54 :
         break;
      case 55 :
         break;
      case 56 :
         break;
      case 58 :
         break;
      case 59 :
         break;
      case 60 :
         break;
      case 61 :
         break;
      case 62 :
         break;
      case 63 :
         break;
      case 64 :
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public RobotTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public RobotTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 2; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfddfffffffffffe1L, 0x1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[2];
    private final int[] jjstateSet = new int[2 * 2];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
